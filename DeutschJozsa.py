import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit import Aer
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

# Página 205
# Matrices de 32 por 32

def balanced_constant(counts):
    if '0000' in counts.keys():
        print("La función es constante")
    else:
        print("La función es balanceada")

print("Función Constante")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(5, 4)
circuit.x(4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.h(4)
circuit.barrier()
circuit.i(0)
circuit.i(1)
circuit.i(2)
circuit.i(3)
circuit.i(4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.barrier()
circuit.measure([0,1,2,3], [3,2,1,0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()

print("Función Balanceada No 1")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(5, 4)
circuit.x(4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.h(4)
circuit.barrier()
circuit.cx(0, 4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.barrier()
circuit.measure([0,1,2,3], [3,2,1,0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()

print("Función Balanceada No 2")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(5, 4)
circuit.x(4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.h(4)
circuit.barrier()
circuit.cx(1, 4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.barrier()
circuit.measure([0,1,2,3], [3,2,1,0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()

print("Función Balanceada No 3")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(5, 4)
circuit.x(4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.h(4)
circuit.barrier()
circuit.cx(2, 4)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.barrier()
circuit.measure([0,1,2,3], [3,2,1,0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()