import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit import Aer
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

def balanced_constant(counts):
    if '0' in counts.keys():
        print("La función es constante")
    else:
        print("La función es balanceada")

print("Ejercicio No 2 Verificación de si la función dada es balanceada o constante")
print()
print("Pruebas con el algoritmo de Deutsch")
print()
print("Circuito de Deutsch")
print()

print("Función No 1: 0 -> 0, 1 -> 0")
print()

print("Prueba con |01>")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 1)
circuit.x(1)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.i(0)
circuit.i(1)
circuit.h(0)
circuit.barrier()
circuit.measure([0], [0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()

print("Función No 2: 0 -> 0, 1 -> 1")
print()

print("Prueba con |01>")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 1)
circuit.x(1)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.cx(0, 1)
circuit.h(0)
circuit.barrier()
circuit.measure([0], [0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()

print("Función No 3: 0 -> 1, 1 -> 0")
print()

print("Prueba con |01>")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 1)
circuit.x(1)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.h(0)
circuit.barrier()
circuit.measure([0], [0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()

print("Función No 4: 0 -> 1, 1 -> 1")
print()

print("Prueba con |01>")
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 1)
circuit.x(1)
circuit.barrier()
circuit.h(0)
circuit.h(1)
circuit.barrier()
circuit.x(1)
circuit.barrier()
circuit.h(0)
circuit.barrier()
circuit.measure([0], [0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
balanced_constant(counts)
print(circuit)
plot_histogram(counts)
plt.show()